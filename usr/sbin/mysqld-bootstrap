#!/usr/bin/env bash

TIMER_START=$(
	date +%s.%N
)

source /etc/mysqld-bootstrap.conf

get_option ()
{
	local value=$(
		/usr/bin/my_print_defaults "${1}" | \
		sed -n "s/^--${2}=//p" | \
		tail -n 1
	)

	printf -- "%s" "${value:-$3}"
}

get_password ()
{
	local PASSWORD_LENGTH=${1:-8}
	local PASSWORD=$(
		head -n 4096 /dev/urandom | \
		tr -cd '[:alnum:]' | \
		cut -c1-${PASSWORD_LENGTH}
	)

	printf -- "%s" "${PASSWORD}"

	return 0
}

have_mysql_access ()
{
	local DB_USER=${1:-root}
	local DB_PASSWORD=${2:-}
	local DB_NAME=${3:-mysql}

	if mysql \
		--protocol=socket \
		--user=${DB_USER} \
		--password=${DB_PASSWORD} \
		-e "use ${DB_NAME}" \
		2> /dev/null; then
		return 0
	fi

	return 1
}

OPTS_FORCE_MYSQL_INSTALL=${FORCE_MYSQL_INSTALL:-false}
OPTS_MYSQL_DATA_DIR="$(get_option mysqld datadir "${MYSQL_DATA_DIR_DEFAULT:-/var/lib/mysql}")"

if [[ ${OPTS_FORCE_MYSQL_INSTALL} == true ]] \
	|| [[ ${OPTS_FORCE_MYSQL_INSTALL} == 1 ]]; then
	echo "Purging MySQL data directory."
	rm -rf ${OPTS_MYSQL_DATA_DIR}/*
fi

if [[ ! -f ${OPTS_MYSQL_DATA_DIR}/ibdata1 ]]; then

	OPTS_MYSQL_INIT_LIMIT=${MYSQL_INIT_LIMIT:-30}
	OPTS_MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD:-$(get_password 16)}"
	OPTS_MYSQL_SOCKET="$(get_option mysqld socket /var/run/mysqld/mysql.sock)"
	OPTS_MYSQL_SOCKET_DIR="${OPTS_MYSQL_SOCKET%/*}"
	OPTS_MYSQL_SERVICE_USER="$(get_option mysqld user mysql)"
	OPTS_MYSQL_SUBNET="${MYSQL_SUBNET:-127.0.0.1}"
	OPTS_MYSQL_USER="${MYSQL_USER:-}"
	OPTS_MYSQL_USER_DATABASE="${MYSQL_USER_DATABASE:-}"
	OPTS_MYSQL_USER_PASSWORD="${MYSQL_USER_PASSWORD:-$(get_password 16)}"

	# TODO New option - default to false set to true to write SQL to log
	OPTS_MYSQL_INIT_SQL_LOG=${MYSQL_INIT_SQL_LOG:-true}

	MYSQL_INIT_SQL_LOG_COMMAND='tee'
	if [[ ${OPTS_MYSQL_INIT_SQL_LOG} == true ]]; then
		MYSQL_INIT_SQL_LOG_COMMAND='tee /var/log/mysql-init'
	fi

	if [[ ${OPTS_MYSQL_SUBNET} == 0.0.0.0/0.0.0.0 ]] \
		|| [[ ${OPTS_MYSQL_SUBNET} == 0.0.0.0 ]]; then
		# Connect from any network
		OPTS_MYSQL_USER_HOST=%
	elif [[ ${OPTS_MYSQL_SUBNET} == 127.0.0.1 ]]; then
		# Internal connection
		OPTS_MYSQL_USER_HOST=localhost
	else
		# User defined host / subnet
		OPTS_MYSQL_USER_HOST=${OPTS_MYSQL_SUBNET}
	fi

	# TODO Validate user OPTS_MYSQL_USER@OPTS_MYSQL_USER_HOST
	# root@localhost will break access exit with error.
	if [[ ${OPTS_MYSQL_USER} == root ]] \
		&& [[ ${OPTS_MYSQL_USER_HOST} == localhost ]]; then
		echo "ERROR: Invalid MYSQL_USER / MYSQL_SUBNET combination."
		echo "  Use MYSQL_ROOT_PASSWORD instead."
		sleep 1
		exit 1
	fi

	# Adjust the UID/GID values of the service user to match a directory that could be a mounted volume
	if [[ -d ${OPTS_MYSQL_DATA_DIR} ]]; then
		SERVICE_UID=$(stat -c "%u" ${OPTS_MYSQL_DATA_DIR})
		SERVICE_GID=$(stat -c "%g" ${OPTS_MYSQL_DATA_DIR})

		if [[ -n ${SERVICE_UID} ]] && [[ ${SERVICE_UID} -ne 0 ]]; then
			usermod -u ${SERVICE_UID} ${OPTS_MYSQL_SERVICE_USER}
			chown -R ${OPTS_MYSQL_SERVICE_USER} ${OPTS_MYSQL_SOCKET_DIR:-/var/run/mysqld}
		fi

		if [[ -n ${SERVICE_GID} ]] && [[ ${SERVICE_GID} -ne 0 ]]; then
			groupmod -g ${SERVICE_GID} ${OPTS_MYSQL_SERVICE_USER}

			# If the group already exists add it to the user's supplementary groups
			if [[ ${?} -ne 0 ]]; then
				usermod -G ${SERVICE_GID} ${OPTS_MYSQL_SERVICE_USER}
			fi
		fi
	fi

	echo "Initalising MySQL data directory."
	mysql_install_db \
		--force \
		--skip-name-resolve \
		--skip-networking \
		--tmpdir=${OPTS_MYSQL_DATA_DIR} \
		--user=${OPTS_MYSQL_SERVICE_USER} \
		&
	PIDS[0]=${!}

	# Create named pipes instead of temporary files
	mkfifo \
		-m 0644 \
		/tmp/mysql-init{,-template}

	# Build the SQL required at the start of initialisation
	read -r -d '' MYSQL_INIT_SQL_HEAD_TEMPLATE <<-EOT

		-- Secure MySQL
		DROP DATABASE IF EXISTS test;
		DELETE FROM mysql.user WHERE User='' OR User='root' AND Host != 'localhost';
		DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
	EOT

	# # TODO Allow creation of multiple databases.
	# # TODO Grants / user privileges template would need to be adapted for this.
	# if [[ -n ${OPTS_MYSQL_USER_DATABASE} ]]; then
	# 	MYSQL_INIT_SQL_HEAD_TEMPLATE+="$(printf -- '\n\n-- Create databases\n')"
	# 	for DATABASE in ${OPTS_MYSQL_USER_DATABASE}; do
	# 
	# 		# TODO Validate database name
	# 
	# 		MYSQL_INIT_SQL_HEAD_TEMPLATE+="$(
	# 			printf -- '\nCREATE DATABASE IF NOT EXISTS `%s`;\n' ${DATABASE}
	# 		)"
	# 	done
	# fi

	MYSQL_INIT_SQL_USER_TEMPLATE=
	if [[ -n ${OPTS_MYSQL_USER} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_HOST} ]]; then
		MYSQL_INIT_SQL_USER_TEMPLATE+="$(
			printf -- '\n\n-- Create users\n'
		)"
		MYSQL_INIT_SQL_USER_TEMPLATE+="$(
			printf -- "\nCREATE USER '%%MYSQL_USER%%'@'%%MYSQL_USER_HOST%%' IDENTIFIED BY '%%MYSQL_USER_PASSWORD%%';\n"
		)"
	fi

	MYSQL_INIT_SQL_USER_PRIVILEGES_TEMPLATE=
	if [[ -n ${OPTS_MYSQL_USER} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_DATABASE} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_HOST} ]]; then
		MYSQL_INIT_SQL_USER_PRIVILEGES_TEMPLATE+="$(
			printf -- '\n\n-- User privileges\n'
		)"
		# for DATABASE in ${OPTS_MYSQL_USER_DATABASE}; do
		# 
		# 	# TODO Validate database user
		# 
		# 	MYSQL_INIT_SQL_USER_PRIVILEGES_TEMPLATE+="$(
		# 		printf -- "\nGRANT ALL PRIVILEGES ON `%s`.* TO '%%MYSQL_USER%%'@'%%MYSQL_USER_HOST%%';\n" ${DATABASE}
		# 	)"
		# done
		MYSQL_INIT_SQL_USER_PRIVILEGES_TEMPLATE+="$(
			printf -- "\nGRANT ALL PRIVILEGES ON \`%%MYSQL_USER_DATABASE%%\`.* TO '%%MYSQL_USER%%'@'%%MYSQL_USER_HOST%%';\n"
		)"
	fi

	# Generate the initialisation SQL template.
	# Prepend with SQL to secure a default installation.
	if [[ -s /srv/mysql/init-structure/structure.sql.gz ]] \
		&& [[ -s /srv/mysql/init-data/data.sql.gz ]] \
		&& [[ -n ${OPTS_MYSQL_USER} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_DATABASE} ]]; then
		echo \
			"${MYSQL_INIT_SQL_HEAD_TEMPLATE}" \
			| \
		gzip \
			| \
		zcat \
			- \
			/srv/mysql/init-structure/structure.sql.gz \
			/srv/mysql/init-data/data.sql.gz \
			> /tmp/mysql-init-template \
			&
	elif [[ -f /srv/mysql/init-structure/structure.sql ]] \
		&& [[ -f /srv/mysql/init-data/data.sql ]] \
		&& [[ -n ${OPTS_MYSQL_USER} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_DATABASE} ]]; then
		echo \
			"${MYSQL_INIT_SQL_HEAD_TEMPLATE}" \
			| \
		cat \
			- \
			/srv/mysql/init-structure/structure.sql \
			/srv/mysql/init-data/data.sql \
			> /tmp/mysql-init-template \
			&
	else
		# Prevent blocking
		echo '' \
			> /tmp/mysql-init-template \
			&
	fi

	# Append root user grant to the template initialisation SQL.
	# Each statement must be on a single line and should not include comments.
	# Replace SQL template placeholder's with option values.
	cat \
		-s \
		/tmp/mysql-init-template \
		- \
		<<-EOT | \
		sed \
			-e '/^--.*$/d' \
			-e '/^$/d' \
			-e "s/%MYSQL_ROOT_PASSWORD%/${OPTS_MYSQL_ROOT_PASSWORD}/g" \
			-e "s/%MYSQL_USER%/${OPTS_MYSQL_USER}/g" \
			-e "s/%MYSQL_USER_DATABASE%/${OPTS_MYSQL_USER_DATABASE}/g" \
			-e "s/%MYSQL_USER_HOST%/${OPTS_MYSQL_USER_HOST}/g" \
			-e "s/%MYSQL_USER_PASSWORD%/${OPTS_MYSQL_USER_PASSWORD}/g" \
			| \
		awk \
			'{ ORS=( /;$/ ? RS:FS ) } 1' \
			| \
		exec ${MYSQL_INIT_SQL_LOG_COMMAND} \
			> /tmp/mysql-init \
			&

		${MYSQL_INIT_SQL_USER_TEMPLATE}

		${MYSQL_INIT_SQL_USER_PRIVILEGES_TEMPLATE}

		-- Update root user as final step
		GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY '%MYSQL_ROOT_PASSWORD%' WITH GRANT OPTION;
		FLUSH PRIVILEGES;
	EOT

	# Wait for the MySQL system table installation to complete
	[[ -n ${PIDS[0]} ]] && wait ${PIDS[0]}

	echo "Initialising MySQL."
	mysqld_safe \
		--skip-networking \
		--init-file=/tmp/mysql-init \
		&

	# Wait for the MySQL database to be initialised by testing 
	COUNTER=$(( 2 * ${OPTS_MYSQL_INIT_LIMIT} ))
	while (( ${COUNTER} >= 1 )); do
		sleep 0.5

		if have_mysql_access root ${OPTS_MYSQL_ROOT_PASSWORD} mysql; then
			break
		fi

		(( COUNTER -= 1 ))
	done

	if [[ ${COUNTER} -eq 0 ]]; then
		printf -- "MySQL initilisation failed after %s seconds.\n" "${OPTS_MYSQL_INIT_LIMIT}"

		killall \
			-15 \
			mysqld

		exit 1
	else
		echo "Stopping MySQL."

		mysqladmin \
			--user=root \
			--password=${OPTS_MYSQL_ROOT_PASSWORD} \
			shutdown
	fi

	DETAILS_MYSQL_USER=
	if [[ -n ${OPTS_MYSQL_USER} ]]; then
		DETAILS_MYSQL_USER="$(
			printf -- "\n%s : %s@%s\n" "user" "${OPTS_MYSQL_USER}" "${OPTS_MYSQL_USER_HOST}"
		)"
	fi

	DETAILS_MYSQL_USER_PASSWORD=
	if [[ -n ${OPTS_MYSQL_USER_PASSWORD} ]]; then
		DETAILS_MYSQL_USER_PASSWORD="$(
			printf -- "\n%s : %s\n" "password" "${OPTS_MYSQL_USER_PASSWORD}"
		)"
	fi

	DETAILS_MYSQL_USER_DATABASE=
	if [[ -n ${OPTS_MYSQL_USER_DATABASE} ]]; then
		DETAILS_MYSQL_USER_DATABASE="$(
			printf -- "\n%s : %s\n" "database" "${OPTS_MYSQL_USER_DATABASE}"
		)"
	fi

	TIMER_TOTAL=$(
		echo - | awk "\
		{ T1="${TIMER_START}" } \
		{ T2="$(date +%s.%N)" } \
		{ print T2 - T1; }"
	)

	cat <<-EOT

		================================================================================
		MySQL Details
		--------------------------------------------------------------------------------
		root@localhost password : ${OPTS_MYSQL_ROOT_PASSWORD}${DETAILS_MYSQL_USER}${DETAILS_MYSQL_USER_PASSWORD}${DETAILS_MYSQL_USER_DATABASE}
		--------------------------------------------------------------------------------
		${TIMER_TOTAL}

	EOT
fi

exit 0