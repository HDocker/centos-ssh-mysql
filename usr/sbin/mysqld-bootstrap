#!/usr/bin/env bash

TIMER_START=$(
	date +%s.%N
)

source /etc/mysqld-bootstrap.conf

get_option ()
{
	local value=$(/usr/bin/my_print_defaults "${1}" | sed -n "s/^--${2}=//p" | tail -n 1)
	echo ${value:-$3}
}

get_password ()
{
	local PASSWORD_LENGTH=${1:-8}
	local PASSWORD=$(
		head -n 4096 /dev/urandom | \
		tr -cd '[:alnum:]' | \
		cut -c1-${PASSWORD_LENGTH}
	)

	printf -- "%s" "${PASSWORD}"

	return 0
}

have_mysql_access ()
{
	local DB_USER=${1:-root}
	local DB_PASSWORD=${2:-}
	local DB_NAME=${3:-mysql}

	printf -- '%s' $(
		mysql \
		--user=${DB_USER} \
		--password=${DB_PASSWORD} \
		-e "use ${DB_NAME}" \
		2> /dev/null
	)
}

OPTS_MYSQL_DATA_DIR=$(get_option mysqld datadir "${MYSQL_DATA_DIR_DEFAULT:-/var/lib/mysql}")
OPTS_MYSQL_SOCKET=$(get_option mysqld socket "/var/run/mysqld/mysql.sock")
OPTS_MYSQL_SOCKET_DIR=${OPTS_MYSQL_SOCKET%/*}
OPTS_MYSQL_SERVICE_USER=$(get_option mysqld user "mysql")
OPTS_FORCE_MYSQL_INSTALL=${FORCE_MYSQL_INSTALL:-0}
OPTS_CUSTOM_MYSQL_INIT_SQL=${CUSTOM_MYSQL_INIT_SQL:-}
OPTS_MYSQL_INIT_LIMIT=${MYSQL_INIT_LIMIT:-30}

if [[ ${OPTS_FORCE_MYSQL_INSTALL} == 1 ]]; then
	echo "MySQL Database Installation: Purging data directory..."
	rm -rf ${OPTS_MYSQL_DATA_DIR}/*
fi

if [[ ! -f ${OPTS_MYSQL_DATA_DIR}/ibdata1 ]]; then

	# Adjust the UID/GID values of the service user to match a directory that could be a mounted volume
	if [[ -d ${OPTS_MYSQL_DATA_DIR} ]]; then
		SERVICE_UID=$(stat -c "%u" ${OPTS_MYSQL_DATA_DIR})
		SERVICE_GID=$(stat -c "%g" ${OPTS_MYSQL_DATA_DIR})

		if [[ -n ${SERVICE_UID} ]] && [[ ${SERVICE_UID} -ne 0 ]]; then
			usermod -u ${SERVICE_UID} ${OPTS_MYSQL_SERVICE_USER}
			chown -R ${OPTS_MYSQL_SERVICE_USER} ${OPTS_MYSQL_SOCKET_DIR:-/var/run/mysqld}
		fi

		if [[ -n ${SERVICE_GID} ]] && [[ ${SERVICE_GID} -ne 0 ]]; then
			groupmod -g ${SERVICE_GID} ${OPTS_MYSQL_SERVICE_USER}

			# If the group already exists add it to the user's supplementary groups
			if [[ ${?} -ne 0 ]]; then
				usermod -G ${SERVICE_GID} ${OPTS_MYSQL_SERVICE_USER}
			fi
		fi
	fi

	OPTS_MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD:-$(get_password 8)}"

	echo "Initalising MySQL data directory."
	mysql_install_db \
		--verbose \
		--force \
		--skip-name-resolve \
		--tmpdir=${OPTS_MYSQL_DATA_DIR} &
	PIDS[0]=${!}

	# Generate the initialisation SQL used secure MySQL
	tee /tmp/mysql-init <<-EOT

		-- =============================================================================
		-- Initialisation SQL
		-- -----------------------------------------------------------------------------
		-- Secure MySQL
		DROP DATABASE IF EXISTS test;
		DELETE FROM mysql.user WHERE User='' OR User='root' AND Host != 'localhost';
		DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
		GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY '${OPTS_MYSQL_ROOT_PASSWORD}' WITH GRANT OPTION;
		-- =============================================================================
		-- Custom Initialisation SQL start
		-- 
		${OPTS_CUSTOM_MYSQL_INIT_SQL}
		-- 
		-- Custom Initialisation SQL end
		-- -----------------------------------------------------------------------------
		FLUSH PRIVILEGES;
	EOT

	# Initilisation SQL should be free from blank and comment lines.
	sed -i \
		-e 's/-- .*$//' \
		-e '/^$/d' \
		/tmp/mysql-init

	# Wait for the MySQL system table installation to complete
	[[ -n ${PIDS[0]} ]] && wait ${PIDS[0]}

	echo "Initialising MySQL..."
	mysqld_safe \
		--init-file=/tmp/mysql-init \
		&
	PIDS[1]=${!}

	# Wait for the MySQL database to be initialised by testing 
	COUNTER=${OPTS_MYSQL_INIT_LIMIT}
	COUNTER_STEP_TIME=0.5
	while [[ ${COUNTER} -ge 1 ]]; do
		sleep ${COUNTER_STEP_TIME}

		if [[ -z $(have_mysql_access root ${OPTS_MYSQL_ROOT_PASSWORD} mysql) ]]; then
			if [[ -z ${MYSQL_USER} ]] || [[ -z ${MYSQL_USER_DATABASE} ]] || [[ -z ${MYSQL_USER_PASSWORD} ]] ; then
				break
			elif [[ -z $(have_mysql_access ${MYSQL_USER} ${MYSQL_USER_PASSWORD} ${MYSQL_USER_DATABASE}) ]]; then
				break
			fi
		fi

		COUNTER=$[${COUNTER}-${COUNTER_STEP_TIME}]
	done

	if [[ ${COUNTER} -eq 0 ]]; then
		echo "MySQL initilisation failed after ${OPT_MYSQL_INIT_LIMIT} seconds."
		exit 1
	fi

	echo "Stopping MySQL..."

	# Wait for the MySQL daemon to stop
	if [[ -s /var/run/mysqld/mysqld.pid ]]; then
		PIDS[2]=$(cat /var/run/mysqld/mysqld.pid)
		kill -15 ${PIDS[2]}
		wait ${PIDS[2]} 2> /dev/null
		[[ -n ${PIDS[1]} ]] && wait ${PIDS[1]} 2> /dev/null
	else
		killall -15 mysqld
		wait ${!} 2> /dev/null
	fi

	rm -f /tmp/mysql-init

	TIMER_TOTAL=$(
		echo - | awk "\
		{ T1="${TIMER_START}" } \
		{ T2="$(date +%s.%N)" } \
		{ print T2 - T1; }"
	)

	cat <<-EOT

		================================================================================
		MySQL Credentials
		--------------------------------------------------------------------------------
		root@localhost : ${OPTS_MYSQL_ROOT_PASSWORD}
		--------------------------------------------------------------------------------
		${TIMER_TOTAL}

	EOT
fi

exit 0