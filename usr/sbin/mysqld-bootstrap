#!/usr/bin/env bash

TIMER_START=$(
	date +%s.%N
)

source /etc/mysqld-bootstrap.conf

get_option ()
{
	local value=$(
		/usr/bin/my_print_defaults "${1}" | \
		sed -n "s/^--${2}=//p" | \
		tail -n 1
	)

	printf -- "%s" "${value:-$3}"
}

get_password ()
{
	local PASSWORD_LENGTH=${1:-8}
	local PASSWORD=$(
		head -n 4096 /dev/urandom | \
		tr -cd '[:alnum:]' | \
		cut -c1-${PASSWORD_LENGTH}
	)

	printf -- "%s" "${PASSWORD}"

	return 0
}

have_mysql_access ()
{
	local DB_USER=${1:-root}
	local DB_PASSWORD=${2:-}
	local DB_NAME=${3:-mysql}

	if mysql \
		--protocol=socket \
		--user=${DB_USER} \
		--password=${DB_PASSWORD} \
		-e "use ${DB_NAME}" \
		2> /dev/null; then
		return 0
	fi

	return 1
}

OPTS_MYSQL_DATA_DIR=$(get_option mysqld datadir "${MYSQL_DATA_DIR_DEFAULT:-/var/lib/mysql}")
OPTS_MYSQL_SOCKET=$(get_option mysqld socket "/var/run/mysqld/mysql.sock")
OPTS_MYSQL_SOCKET_DIR=${OPTS_MYSQL_SOCKET%/*}
OPTS_MYSQL_SERVICE_USER=$(get_option mysqld user "mysql")
OPTS_FORCE_MYSQL_INSTALL=${FORCE_MYSQL_INSTALL:-0}
OPTS_CUSTOM_MYSQL_INIT_SQL=${CUSTOM_MYSQL_INIT_SQL:-}
OPTS_MYSQL_INIT_LIMIT=${MYSQL_INIT_LIMIT:-30}

if [[ ${OPTS_FORCE_MYSQL_INSTALL} == 1 ]]; then
	echo "Purging MySQL data directory."
	rm -rf ${OPTS_MYSQL_DATA_DIR}/*
fi

if [[ ! -f ${OPTS_MYSQL_DATA_DIR}/ibdata1 ]]; then

	# Adjust the UID/GID values of the service user to match a directory that could be a mounted volume
	if [[ -d ${OPTS_MYSQL_DATA_DIR} ]]; then
		SERVICE_UID=$(stat -c "%u" ${OPTS_MYSQL_DATA_DIR})
		SERVICE_GID=$(stat -c "%g" ${OPTS_MYSQL_DATA_DIR})

		if [[ -n ${SERVICE_UID} ]] && [[ ${SERVICE_UID} -ne 0 ]]; then
			usermod -u ${SERVICE_UID} ${OPTS_MYSQL_SERVICE_USER}
			chown -R ${OPTS_MYSQL_SERVICE_USER} ${OPTS_MYSQL_SOCKET_DIR:-/var/run/mysqld}
		fi

		if [[ -n ${SERVICE_GID} ]] && [[ ${SERVICE_GID} -ne 0 ]]; then
			groupmod -g ${SERVICE_GID} ${OPTS_MYSQL_SERVICE_USER}

			# If the group already exists add it to the user's supplementary groups
			if [[ ${?} -ne 0 ]]; then
				usermod -G ${SERVICE_GID} ${OPTS_MYSQL_SERVICE_USER}
			fi
		fi
	fi

	OPTS_MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD:-$(get_password 8)}"

	echo "Initalising MySQL data directory."
	mysql_install_db \
		--verbose \
		--force \
		--skip-name-resolve \
		--skip-networking \
		--tmpdir=${OPTS_MYSQL_DATA_DIR} &
	PIDS[0]=${!}

	# Generate the initialisation SQL used secure MySQL
	tee /tmp/mysql-init-template <<-EOT

		-- =============================================================================
		-- Initialisation SQL
		-- -----------------------------------------------------------------------------
		-- Secure MySQL
		DROP DATABASE IF EXISTS test;
		DELETE FROM mysql.user WHERE User='' OR User='root' AND Host != 'localhost';
		DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
		-- =============================================================================
		-- Custom Initialisation SQL start
		-- 
		${OPTS_CUSTOM_MYSQL_INIT_SQL}
		-- 
		-- Custom Initialisation SQL end
		-- -----------------------------------------------------------------------------
		GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' 
		IDENTIFIED BY '${OPTS_MYSQL_ROOT_PASSWORD}' 
		WITH GRANT OPTION;
		FLUSH PRIVILEGES;
	EOT

	# Each statement must be on a single line and should not include comments.
	cat \
		-s \
		/tmp/mysql-init-template \
		| \
	sed \
		-e '/^[ \t]*--.*$/d' \
		-e 's/;[ \t]*--.*$/;/g' \
		-e '/^$/d' \
		| \
	awk \
		'{ ORS=( /;$/ ? RS:FS ) } 1' \
		> /tmp/mysql-init

	# Wait for the MySQL system table installation to complete
	[[ -n ${PIDS[0]} ]] && wait ${PIDS[0]}

	echo "Initialising MySQL."
	mysqld_safe \
		--skip-networking \
		--init-file=/tmp/mysql-init \
		&

	# Wait for the MySQL database to be initialised by testing 
	COUNTER=$(( 2 * ${OPTS_MYSQL_INIT_LIMIT} ))
	while (( ${COUNTER} >= 1 )); do
		sleep 0.5

		if have_mysql_access root ${OPTS_MYSQL_ROOT_PASSWORD} mysql; then
			break
		fi

		(( COUNTER -= 1 ))
	done

	if [[ ${COUNTER} -eq 0 ]]; then
		printf \
			-- "MySQL initilisation failed after %s seconds.\n" \
			"${OPTS_MYSQL_INIT_LIMIT}"
		exit 1
	fi

	echo "Stopping MySQL."
	killall \
		-w \
		-15 \
		mysqld

	rm -f /tmp/mysql-init{,-template}

	TIMER_TOTAL=$(
		echo - | awk "\
		{ T1="${TIMER_START}" } \
		{ T2="$(date +%s.%N)" } \
		{ print T2 - T1; }"
	)

	cat <<-EOT

		================================================================================
		MySQL Credentials
		--------------------------------------------------------------------------------
		root@localhost : ${OPTS_MYSQL_ROOT_PASSWORD}
		--------------------------------------------------------------------------------
		${TIMER_TOTAL}

	EOT
fi

exit 0