# -----------------------------------------------------------------------------
# To install:
#     sudo cp {container-path}/{service-name}@{port}.service /etc/systemd/system/
#
#   If not installing to a CoreOS distribution replace etcd2.service 
#   with etcd.service using:
#     sudo sed -i -e 's~etcd2.service~etcd.service~g' \
#       /etc/systemd/system/{service-name}@{port}.service
#
#     sudo systemctl daemon-reload
#     sudo systemctl enable -f /etc/systemd/system/{service-name}@{port}.service
#
# Start using:
#     sudo systemctl [start|stop|restart|kill|status] {service-name}@{port}.service
#
# Debugging:
#     journalctl -fn 50 -u {service-name}@{port}.service
#
# To uninstall:
#     sudo systemctl disable -f /etc/systemd/system/{service-name}@{port}.service
#     sudo systemctl stop /etc/systemd/system/{service-name}@{port}.service
#     sudo docker rm {service-name}
# -----------------------------------------------------------------------------

[Unit]
Description=centos-ssh-mysql // %p
Requires=docker.service
Requires=etcd2.service
After=etcd2.service
After=docker.service

[Service]
Restart=on-failure
RestartSec=30
TimeoutStartSec=1200
Environment="DOCKER_IMAGE_PACKAGE_PATH=/var/services-packages"
Environment="DOCKER_IMAGE_NAME=jdeathe/centos-ssh-mysql"
Environment="DOCKER_IMAGE_TAG=centos-6-1.4.2"
Environment="DOCKER_PORT_MAP_TCP_3306=%i"
Environment="SERVICE_UNIT_NAME=mysql"
Environment="SERVICE_UNIT_APP_GROUP=app-1"
Environment="SERVICE_UNIT_SHARED_GROUP=pool-1"
Environment="SERVICE_UNIT_LOCAL_ID=1"
Environment="SERVICE_UNIT_INSTANCE=1"
Environment="VOLUME_CONFIG_ENABLED=false"
Environment="VOLUME_CONFIG_NAMED=false"
Environment="VOLUME_CONFIG_NAME=volume-config.%p"
Environment="VOLUME_DATA_NAME=volume-data.%p"

# Initialisation: Load image from local storage if available, otherwise pull.
ExecStartPre=/bin/bash -c \
  "if [[ -z $( if [[ -n $(/usr/bin/docker images -q ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}) ]]; then echo $(/usr/bin/docker images -q ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}); else echo $(/usr/bin/docker images -q docker.io/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}); fi; ) ]]; then \
    if [[ -f ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz ]]; then \
      /usr/bin/xz -dc ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz | /usr/bin/docker load; \
    else \
      /usr/bin/docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
    fi; \
  fi"

# Create a data container for the configuration volume
ExecStartPre=/bin/bash -c \
  "if [[ ${VOLUME_CONFIG_ENABLED} == true ]] && [[ ${VOLUME_CONFIG_NAMED} == true ]]; then \
    if [[ -z $(/usr/bin/docker ps -aq --filter \"name=${VOLUME_CONFIG_NAME}\") ]]; then \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME}.tmp \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/sh -c 'while true; do echo -ne .; sleep 1; done'; \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME} \
        -v ${VOLUME_CONFIG_NAME}:/etc/services-config \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/true; \
      /usr/bin/docker cp ${VOLUME_CONFIG_NAME}.tmp:/etc/services-config/. \
        /var/lib/docker/volumes/${VOLUME_CONFIG_NAME}/_data; \
      /usr/bin/docker kill ${VOLUME_CONFIG_NAME}.tmp; \
    fi; \
  elif [[ ${VOLUME_CONFIG_ENABLED} == true ]] && [[ ${VOLUME_CONFIG_NAMED} != true ]]; then \
    if [[ -z $(/usr/bin/docker ps -aq --filter \"name=${VOLUME_CONFIG_NAME}\") ]]; then \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME} \
        -v /etc/services-config \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/true; \
    fi; \
  fi"

# Terminate existing container to allow for redeployment
ExecStartPre=/bin/bash -c \
  "if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p\") ]]; then \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p\" --filter \"status=paused\") ]]; then \
      /usr/bin/docker unpause %p; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p\" --filter \"status=running\") ]]; then \
      /usr/bin/docker stop %p; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p\") ]]; then \
      /usr/bin/docker rm -f %p.%i; \
    fi; \
  fi"

# Startup
ExecStart=/bin/sudo /bin/bash -c \
  "if [[ -n $(/usr/bin/docker ps -aq --filter \"name=${VOLUME_CONFIG_NAME}\") ]]; then \
    /usr/bin/docker run \
      --name %p \
      -p %i:3306 \
      --volumes-from ${VOLUME_CONFIG_NAME} \
      -v ${VOLUME_DATA_NAME}:/var/lib/mysql \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  else \
    /usr/bin/docker run \
      --name %p \
      -p %i:3306 \
      -v ${VOLUME_DATA_NAME}:/var/lib/mysql \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  fi"

# Register service
ExecStartPost=/usr/bin/etcdctl \
  set \
  /services/${SERVICE_UNIT_NAME}/${SERVICE_UNIT_SHARED_GROUP}/${SERVICE_UNIT_LOCAL_ID}.${SERVICE_UNIT_INSTANCE} \
  %H:%i

# Shutdown
ExecStop=/usr/bin/docker stop --time 10 %p

# Unregister service
ExecStopPost=/bin/bash -c \
  "if /usr/bin/etcdctl get /services/%p &> /dev/null; then \
    /usr/bin/etcdctl \
      rm \
      /services/${SERVICE_UNIT_NAME}/${SERVICE_UNIT_SHARED_GROUP}/${SERVICE_UNIT_LOCAL_ID}.${SERVICE_UNIT_INSTANCE}; \
  fi"

[Install]
WantedBy=multi-user.target
