# -----------------------------------------------------------------------------
# Create a data container for the configuration volume: 
#     docker run -v /config --name volume-config.<service-name> busybox /bin/true
#
# To install: 
#     sudo cp <container-path>/<service-name>@<port>.service /etc/systemd/system/
#     sudo systemctl daemon-reload
#     sudo systemctl enable /etc/systemd/system/<service-name>@<port>.service
#
# Usage: 
#     sudo systemctl [start|stop|restart|kill|status] <service-name>@<port>.service
#
# Debugging: 
#     journalctl -fn 50 u <service-name>@<port>.service
# -----------------------------------------------------------------------------

[Unit]
Description=CentOS-6 / MySQL // pool-1.1.1
After=etcd2.service
After=docker.service
Requires=docker.service
Requires=etcd2.service

[Service]
Restart=on-failure
RestartSec=30
TimeoutStartSec=1200
Environment="DOCKER_IMAGE_PACKAGE_PATH=/var/services-packages"
Environment="DOCKER_IMAGE_NAME=jdeathe/centos-ssh-mysql"
Environment="DOCKER_IMAGE_TAG=centos-6-1.4.2"
Environment="VOLUME_CONFIG_ENABLED=false"
Environment="VOLUME_CONFIG_NAMED=false"
Environment="VOLUME_CONFIG_NAME=volume-config.%p"
Environment="VOLUME_DATA_NAME=volume-data.%p"

# Initialisation: Load image from local storage if available, otherwise pull.
ExecStartPre=/bin/sudo /bin/bash -c \
  "if [[ ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} != $(/usr/bin/docker images | awk -v FS='[ ]+' -v pattern=\"^${DOCKER_IMAGE_NAME}[ ]+${DOCKER_IMAGE_TAG} \" '$0 ~ pattern { print $1\":\"$2; }') ]]; then \
    if [[ -f ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz ]]; then \
      /usr/bin/xz -dc ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz | /usr/bin/docker load; \
    else \
      /usr/bin/docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
    fi; \
  fi"

# Create a data container for the configuration volume
ExecStartPre=/bin/sudo /bin/bash -c \
  "if [[ ${VOLUME_CONFIG_ENABLED} == true ]] && [[ ${VOLUME_CONFIG_NAMED} == true ]]; then \
    if [[ ${VOLUME_CONFIG_NAME} != $(/usr/bin/docker ps -a | /bin/awk -v pattern=\"^${VOLUME_CONFIG_NAME}$\" '$NF ~ pattern { print $NF; }') ]]; then \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME}.tmp \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/sh -c 'while true; do echo -ne .; sleep 1; done'; \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME} \
        -v ${VOLUME_CONFIG_NAME}:/etc/services-config \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/true; \
      /usr/bin/docker cp ${VOLUME_CONFIG_NAME}.tmp:/etc/services-config/. \
        /var/lib/docker/volumes/${VOLUME_CONFIG_NAME}/_data; \
      /usr/bin/docker kill ${VOLUME_CONFIG_NAME}.tmp; \
    fi; \
  elif [[ ${VOLUME_CONFIG_ENABLED} == true ]] && [[ ${VOLUME_CONFIG_NAMED} != true ]]; then \
    if [[ ${VOLUME_CONFIG_NAME} != $(/usr/bin/docker ps -a | /bin/awk -v pattern=\"^${VOLUME_CONFIG_NAME}$\" '$NF ~ pattern { print $NF; }') ]]; then \
      /usr/bin/docker run \
        --name ${VOLUME_CONFIG_NAME} \
        -v /etc/services-config \
        ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
        /bin/true; \
    fi; \
  fi"

# Remove existing container (and stop if running). This allows it to 
# be re-created on startup but not removed on exit as with --rm.
ExecStartPre=/bin/sudo /bin/bash -c \
  "if [[ %p == $(/usr/bin/docker ps -a | /bin/awk -v pattern='^%p$' '$NF ~ pattern { print $NF; }') ]]; then \
    if [[ %p == $(/usr/bin/docker ps | /bin/awk -v pattern='^%p$' '$NF ~ pattern { print $NF; }') ]]; then \
      /usr/bin/docker stop %p; \
    fi; \
    /usr/bin/docker rm %p; \
  fi"

# Startup
ExecStart=/bin/sudo /bin/bash -c \
  "if [[ ${VOLUME_CONFIG_NAME} == $(/usr/bin/docker ps -a | /bin/awk -v pattern=\"^${VOLUME_CONFIG_NAME}$\" '$NF ~ pattern { print $NF; }') ]]; then \
    /usr/bin/docker run \
      --name %p \
      -p %i:3306 \
      --volumes-from ${VOLUME_CONFIG_NAME} \
      -v ${VOLUME_DATA_NAME}:/var/lib/mysql \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  else \
    /usr/bin/docker run \
      --name %p \
      -p %i:3306 \
      -v ${VOLUME_DATA_NAME}:/var/lib/mysql \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  fi"

ExecStartPost=/usr/bin/etcdctl set /services/mysql/pool-1/1.1 %H:%i

ExecStop=/usr/bin/docker stop --time 10 %p
ExecStopPost=/usr/bin/etcdctl rm /services/mysql/pool-1/1.1

[Install]
WantedBy=multi-user.target