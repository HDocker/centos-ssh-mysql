DOCKER_USER=jdeathe
DOCKER_IMAGE_NAME=centos-ssh-mysql
DOCKER_IMAGE_TAG=latest

SERVICE_UNIT_NAME=mysql
SERVICE_UNIT_SHARED_GROUP=pool-1
SERVICE_UNIT_LOCAL_ID=1
SERVICE_UNIT_INSTANCE=1

MOUNT_PATH_CONFIG=/etc/services-config
# Mac hosts need to be in User writable directory
if [ "$(uname)" == "Darwin" ]; then
	MOUNT_PATH_CONFIG=~/services-config
fi

MOUNT_PATH_DATA=/var/services-data
if [ "$(uname)" == "Darwin" ]; then
	MOUNT_PATH_DATA=~/services-data
fi

MYSQL_DATA_DIR=/var/lib/mysql

SSH_SERVICE_ENABLED=false

DOCKER_IMAGE_REPOSITORY_NAME=${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
DOCKER_NAME=${SERVICE_UNIT_NAME}.${SERVICE_UNIT_SHARED_GROUP}.${SERVICE_UNIT_LOCAL_ID}.${SERVICE_UNIT_INSTANCE}

VOLUME_CONFIG_NAME=volume-config.${DOCKER_NAME}

get_docker_host_bridge_ip_addr ()
{
	local IP

	if [[ ${DOCKER_HOST} != "" ]]; then
		# If using a docker host VM then we assume a CIDR of /25
		IP=$(echo ${DOCKER_HOST} | grep -oE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")/24
	else
		IP=$(ip addr show ${1:-docker0} | grep -oE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}")
	fi

	echo ${IP}
}

get_docker_host_bridge_ip ()
{
	local IP=$(get_docker_host_bridge_ip_addr ${1:-docker0})
	local IP_PARTS=(${IP//\// })

	echo ${IP_PARTS[0]}
}

get_docker_host_bridge_cidr ()
{
	local IP=$(get_docker_host_bridge_ip_addr ${1:-docker0})
	local IP_PARTS=(${IP//\// })

	echo ${IP_PARTS[1]}
}

get_docker_host_mysql_subnet ()
{

	local IP=$(get_docker_host_bridge_ip ${1:-docker0})
	local CIDR=$(get_docker_host_bridge_cidr ${1:-docker0})
	local IP_OCTETS=(${IP//./ })

	# MySQL can only limit connections based on 8, 16, 24 or 32 bits
	case ${CIDR} in
	0)
		# Any IP address/subnet
		echo 0.0.0.0/0.0.0.0
		;;
	1|2|3|4|5|6|7|8)
		# Class A - 10.0.0.0
		echo ${IP_OCTETS[0]}.0.0.0/255.0.0.0
		;;
	9|10|11|12|13|14|15|16)
		# Class B - 10.10.0.0
		echo ${IP_OCTETS[0]}.${IP_OCTETS[1]}.0.0/255.255.0.0
		;;
	17|18|19|20|21|22|23|24)
		# Class C - 10.10.10.0
		echo ${IP_OCTETS[0]}.${IP_OCTETS[1]}.${IP_OCTETS[2]}.0/255.255.255.0
		;;
	*)
		if [ "${IP}" == "" ] || [ "${IP}" == "0.0.0.0" ]; then
			# Could not determin IP address or CIDR
			#echo 0.0.0.0/0.0.0.0
			echo 127.0.0.1
		else
			# Exact match on IP address only
			echo ${IP}/255.255.255.255
		fi
		;;
	esac
}

get_docker_container_ip ()
{
	echo $(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${1:-})
}

get_docker_container_cidr ()
{
	echo $(docker inspect --format '{{ .NetworkSettings.IPPrefixLen }}' ${1:-})
}

get_docker_container_mysql_subnet ()
{

	local IP=$(get_docker_container_ip ${1:-})
	local CIDR=$(get_docker_container_cidr ${1:-})
	local IP_OCTETS=(${IP//./ })

	# MySQL can only limit connections based on 8, 16, 24 or 32 bits
	case ${CIDR} in
	0)
		# Any IP address/subnet
		echo 0.0.0.0/0.0.0.0
		;;
	1|2|3|4|5|6|7|8)
		# Class A - 10.0.0.0
		echo ${IP_OCTETS[0]}.0.0.0/255.0.0.0
		;;
	9|10|11|12|13|14|15|16)
		# Class B - 10.10.0.0
		echo ${IP_OCTETS[0]}.${IP_OCTETS[1]}.0.0/255.255.0.0
		;;
	17|18|19|20|21|22|23|24)
		# Class C - 10.10.10.0
		echo ${IP_OCTETS[0]}.${IP_OCTETS[1]}.${IP_OCTETS[2]}.0/255.255.255.0
		;;
	*)
		# Exact Match IP - 10.10.10.0
		echo ${IP}/255.255.255.255
		;;
	esac
}

# Docker host network environmental variables
MYSQL_SUBNET=$(get_docker_host_mysql_subnet docker0)